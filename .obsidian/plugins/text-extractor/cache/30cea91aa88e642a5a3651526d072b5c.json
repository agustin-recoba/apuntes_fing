{"path":"Fundamentos de Seguridad Informatica/pdfs/aplicaciones_owasp_top_ten.pdf","text":"Fundamentos de la Seguridad Inform√°tica Seguridad en aplicaciones: OWASP Top Ten GSI - Facultad de Ingenier√≠a Modelo de riesgo usado por OWASP Top 1-5 Las fallas de inyecci√≥n, como SQL, NoSQL, OS o LDAP ocurren cuando se env√≠an datos no confiables a un int√©rprete, como parte de un comando o consulta. Los datos da√±inos del atacante pueden enga√±ar al int√©rprete para que ejecute comandos involuntarios o acceda a los datos sin la debida autorizaci√≥n. A1:2017 Inyecci√≥n Las funciones de la aplicaci√≥n relacionadas a autenticaci√≥n y gesti√≥n de sesiones son implementadas incorrectamente, permitiendo a los atacantes comprometer usuarios y contrase√±as, token de sesiones, o explotar otras fallas de implementaci√≥n para asumir la identidad de otros usuarios (temporal o permanentemente). A2:2017 P√©rdida de Autenticaci√≥n Muchas aplicaciones web y APIs no protegen adecuadamente datos sensibles, tales como informaci√≥n financiera, de salud o Informaci√≥n Personalmente Identificable (PII). Los atacantes pueden robar o modificar estos datos protegidos inadecuadamente para llevar a cabo fraudes con tarjetas de cr√©dito, robos de identidad u otros delitos. Los datos sensibles requieren m√©todos de protecci√≥n adicionales, como el cifrado en almacenamiento y tr√°nsito. A3:201 Exposici√≥n de datos sensibles Muchos procesadores XML antiguos o mal configurados eval√∫an referencias a entidades externas en documentos XML. Las entidades externas pueden utilizarse para revelar archivos internos mediante la URI o archivos internos en servidores no actualizados, escanear puertos de la LAN, ejecutar c√≥digo de forma remota y realizar ataques de denegaci√≥n de servicio (DoS). A4:2017 Entidades Externas XML (XXE) Las restricciones sobre lo que los usuarios autenticados pueden hacer no se aplican correctamente. Los atacantes pueden explotar estos defectos para acceder, de forma no autorizada, a funcionalidades y/o datos, cuentas de otros usuarios, ver archivos sensibles, modificar datos, cambiar derechos de acceso y permisos, etc. A5:2017 P√©rdida de Control de Acceso Top 6-10 La configuraci√≥n de seguridad incorrecta es un problema muy com√∫n y se debe en parte a establecer la configuraci√≥n de forma manual, ad hoc o por omisi√≥n (o directamente por la falta de configuraci√≥n). Son ejemplos: S3 buckets abiertos, cabeceras HTTP mal configuradas, mensajes de error con contenido sensible, falta de parches y actualizaciones, frameworks, dependencias y componentes desactualizados, etc. A6:2017 Configuraci√≥n de Seguridad Incorrecta Los XSS ocurren cuando una aplicaci√≥n toma datos no confiables y los env√≠a al navegador web sin una validaci√≥n y codificaci√≥n apropiada; o actualiza una p√°gina web existente con datos suministrados por el usuario utilizando una API que ejecuta JavaScript en el navegador. Permiten ejecutar comandos en el navegador de la v√≠ctima y el atacante puede secuestrar una sesi√≥n, modificar (defacement) los sitios web, o redireccionar al usuario hacia un sitio malicioso. A7:2017 Secuencia de Comandos en Sitios Cruzados (XSS) Estos defectos ocurren cuando una aplicaci√≥n recibe objetos serializados da√±inos y estos objetos pueden ser manipulados o borrados por el atacante para realizar ataques de repetici√≥n, inyecciones o elevar sus privilegios de ejecuci√≥n. En el peor de los casos, la deserializaci√≥n insegura puede conducir a la ejecuci√≥n remota de c√≥digo en el servidor. A8:2017 Deserializaci√≥n Insegura Los componentes como bibliotecas, frameworks y otros m√≥dulos se ejecutan con los mismos privilegios que la aplicaci√≥n. Si se explota un componente vulnerable, el ataque puede provocar una p√©rdida de datos o tomar el control del servidor. Las aplicaciones y API que utilizan componentes con vulnerabilidades conocidas pueden debilitar las defensas de las aplicaciones y permitir diversos ataques e impactos. A9:2017 Componentes con vulnerabilidades conocidas El registro y monitoreo insuficiente, junto a la falta de respuesta ante incidentes permiten a los atacantes mantener el ataque en el tiempo, pivotear a otros sistemas y manipular, extraer o destruir datos. Los estudios muestran que el tiempo de detecci√≥n de una brecha de seguridad es mayor a 200 d√≠as, siendo t√≠picamente detectado por terceros en lugar de por procesos internos A10:2017 Registro y Monitoreo Insuficientes A1: Inyecci√≥n Una aplicaci√≥n es vulnerable a ataque cuando: ‚óè Los datos suministrados por el usuario no son validados, filtrados o sanitizados por la aplicaci√≥n. ‚óè Se invocan consultas din√°micas o no paremitrizadas sin codificar sus par√°metros de forma acorde al contexto. ‚óè Datos hostiles se utilizan dentro de los par√°metros de b√∫squeda en consultas object-relational mapping (ORM) para extraer registros adicionales y sensibles. ‚óè Datos hostiles se utilizan o concatenan directamente, de manera que el SQL o comando contiene tanto datos de estructura como hostiles en consultas din√°micas, comandos o procedimientos almacenados. Inyecci√≥n SQL ‚Äì Demostraci√≥nFirewall Hardened OS Web Server App ServerFirewallDatabasesLegacy SystemsWeb ServicesDirectoriesHuman ResrcsBilling Custom Code APPLICATION ATTACKCapa de RedCapa de Aplicaci√≥nAccountsFinanceAdministrationTransactionsCommunicationKnowledge MgmtE-CommerceBus. Functions Pedido HTTPüòà Consulta SQLüòà Tabla BD ‚õÅ Resp HTTP ‚õÅ \"SELECT * FROM accounts WHERE acct=‚Äò‚Äô OR 1=1--‚Äô\" 1. Aplicaci√≥n presenta un formulario web al atacante 2. Atacante env√≠a un ataque en los datos del formulario 3. Aplicaci√≥n dirige el ataque a la base de datos en una consulta SQL Account Summary Acct:5424-6066-2134-4334 Acct:4128-7574-3921-0192 Acct:5424-9383-2039-4029 Acct:4128-0004-1234-0293 4. Base de datos ejecuta el ataque y env√≠a los resultados cifrados nuevamente a la aplicaci√≥n 5. Aplicaci√≥n descifra los datos normalmente y env√≠a los resultados al atacante Account: SKU: Account: SKU: A1: Evitar Fallas de Inyecci√≥n ‚óè Evitar el int√©rprete completamente ‚óè Utilizar una interfaz que soporte variables parametrizadas (Ej., declaraciones preparadas, o procedimientos almacenados), ‚óè Usar variables parametrizadas ‚óè Decodificar y convertir todas las entradas del usuario a su forma mas simple antes de enviarlas al interprete ‚óè Siempre efectuar una validaci√≥n ‚Äòpositiva‚Äô de todas las entradas realizadas por el usuario ‚óè Seguir el principio de m√≠nimo privilegio en las conexiones con bases de datos para reducir el impacto de una falla ‚Äì FSI ‚Äì Seguridad en Aplicaciones Web 8 A2: P√©rdida de Autenticaci√≥n y Gesti√≥n de Sesiones ‚óè Las funciones de la aplicaci√≥n relacionadas a autenticaci√≥n y gesti√≥n de sesiones son frecuentemente implementadas incorrectamente ‚óè Permiten a los atacantes comprometer contrase√±as, llaves, token de sesiones, o explotar otras fallas de implementaci√≥n para asumir la identidad de otros usuarios A2: Soy Vulnerable? ‚óè Permite ataques automatizados como la reutilizaci√≥n de credenciales conocidas, cuando el atacante posee una lista de pares de usuario y contrase√±a v√°lidos. ‚óè Permite ataques de fuerza bruta u otros ataques automatizados. ‚óè Permite contrase√±as por defecto, d√©biles o bien conocidas, como \"Password1\", \"Contrase√±a1\" o \"admin/admin‚Äù A2: C√≥mo prevenirlo? ‚óè Implemente la autenticaci√≥n multifactor (MFA) ‚Äì evita ataques automatizados, de relleno de credenciales, fuerza bruta o reuso de credenciales robadas ‚óè No incluya o implemente en su software credenciales por defecto, particularmente para administradores ‚óè Implemente un control contra contrase√±as d√©biles, tal como verificar que la contrase√±a no est√© incluida en la lista del top 10000 de peores contrase√±as. ‚óè Definir y aplicar pol√≠ticas de contrase√±as ‚Äì Por ej: pautas de la secci√≥n 5.1.1 para Secretos Memorizados de la gu√≠a NIST 800-63 B's FSI ‚Äì Seguridad en Aplicaciones Web 11 A3: Exposici√≥n de Datos Sensibles ‚óè Sin un chequeo de control de acceso u otra protecci√≥n, los atacantes pueden manipular par√°metros para acceder a datos no autorizados ‚óè Aplicaciones o APIs no siempre verifican que el usuario est√° autorizado a trabajar con el recurso objetivo FSI ‚Äì Seguridad en Aplicaciones Web 12 A3: Soy vulnerable? (I) ‚óè Identificar las necesidades de protecci√≥n de datos sensibles ‚Äì Datos en tr√°nsito y en almacenamiento ‚Äì Contrase√±as, n√∫meros de tarjetas de cr√©dito, registros m√©dicos, informaci√≥n personal y datos sensibles del negocio requieren una protecci√≥n adicional ‚Äì Reglamentaciones, por ej, Reglamento General de Protecci√≥n de Datos de la UE (GDPR), PCI Data Security Standard (PCI DSS). FSI ‚Äì Seguridad en Aplicaciones Web 13 A3: Soy vulnerable? (II) ‚óè ¬øSe transmite alg√∫n dato en texto claro? Esto se refiere a protocolos como HTTP, SMTP y FTP. No s√≥lo externo, tambi√©n todo el tr√°fico interno, por ejemplo, entre los balanceadores de carga, servidores web o sistemas backend ‚óè ¬øSe utilizan algoritmos criptogr√°ficos antiguos o d√©biles? ‚óè ¬øSe utilizan claves criptogr√°ficas predeterminadas, se generan o reutilizan claves criptogr√°ficas d√©biles, o falta una gesti√≥n o rotaci√≥n adecuada de las claves? FSI ‚Äì Seguridad en Aplicaciones Web 14 A3: C√≥mo se previene? ‚óè Clasificar los datos procesados, almacenados o transmitidos por el sistema ‚óè Aplicar los controles para cada clasificaci√≥n ‚óè No almacene datos sensibles innecesariamente ‚óè Aseg√∫rese de que se utilizan √∫nicamente algoritmos y protocolos est√°ndares y fuertes FSI ‚Äì Seguridad en Aplicaciones Web 15 A4: Entidades Externas XML (XXE) ‚óè Atacantes pueden explotar procesadores XML vulnerables si pueden cargar XMLs o incluir contenido hostil en un documento XML, explotando c√≥digo vulnerable, dependencias o integraciones. ‚óè De forma predeterminada, muchos procesadores XML no modernos permiten la especificaci√≥n de una entidad externa, una URI que se referencia y eval√∫a durante el procesamiento XML. FSI ‚Äì Seguridad en Aplicaciones Web 16 A4: Soy vulnerable? ‚óè La aplicaci√≥n acepta XML directamente o carga XML ‚Äì especialmente de fuentes no confiables ‚Äì inserta datos no confiables en documentos XML ‚óè SAML utiliza XML para afirmaciones de identidad, pudiendo ser vulnerable. FSI ‚Äì Seguridad en Aplicaciones Web 17 A4: C√≥mo se previene? ‚óè Utilizar formatos menos complejos como JSON ‚óè Actualice todos los procesadores y bibliotecas XML ‚óè Deshabilitar entidades externas de XML y procesamiento DTD en todos los analizadores sint√°cticos XML ‚óè Implementar validaci√≥n de entrada positiva (\"lista blanca\"), filtrado, o sanitizaci√≥n para prevenir datos hostiles dentro de documentos ,cabeceras o nodos XML A5: P√©rdida en control de acceso ‚óè El control de acceso aplica la pol√≠tica de modo que los usuarios no puedan actuar fuera de los permisos previstos ‚óè La explotaci√≥n del Control de Acceso es una habilidad clave de los atacantes ‚óè El control de acceso es detectable utilizando medios manuales, o posiblemente a trav√©s de la automatizaci√≥n por la ausencia de controles de acceso en ciertos frameworks A5: Soy vulnerable? ‚óè Pasar por alto las comprobaciones de control de acceso modificando la URL, el estado interno de la aplicaci√≥n o p√°gina HTML, o utilizando una herramienta personalizada de ataques a API. ‚óè Permitir que la clave primaria se cambie a la de otro usuario, pudiendo ver o editar la cuenta de otra persona. ‚óè Elevaci√≥n de privilegios: actuar como un usuario sin iniciar sesi√≥n, o actuar como un administrador iniciando sesi√≥n como usuario. A5: Soy vulnerable? (2) ‚óè Manipulaci√≥n de metadatos, como reproducir o manipular un token de control de acceso JWT (JSON Web Token), una cookie o un campo oculto para elevar los privilegios, o abusar de la invalidaci√≥n de tokens JWT. ‚óè La configuraci√≥n incorrecta de CORS permite el acceso no autorizado a la API. ‚óè Forzar la navegaci√≥n a p√°ginas autenticadas como un usuario no autenticado o a p√°ginas privilegiadas como usuario est√°ndar. Acceder a API con controles de acceso ausentes para verbos POST, PUT y DELETE. A5: C√≥mo se previene? ‚óè El control de acceso solo es efectivo si es aplicado del lado del servidor o en la API ‚óè Con la excepci√≥n de los recursos p√∫blicos, denegar de forma predeterminada ‚óè Implemente los mecanismos de control de acceso una vez y reutilizarlo en toda la aplicaci√≥n, incluyendo minimizar el control de acceso HTTP (CORS). FSI ‚Äì Seguridad en Aplicaciones Web 22 A6: Configuraci√≥n de Seguridad Incorrecta ‚óè Los atacantes a menudo intentar√°n explotar defectos sin parchear o acceder a cuentas predeterminadas, p√°ginas no utilizadas, archivos y directorios desprotegidos, etc. para obtener acceso o conocimiento no autorizado del sistema. FSI ‚Äì Seguridad en Aplicaciones Web 23 A6: Soy vulnerable? (I) ‚óè Falta de hardening adecuado en el stack tecnol√≥gico, o permisos mal configurados en los servicios de la nube ‚óè Caracter√≠stica innecesarias habilitadas ‚óè Cuentas predeterminadas y sus contrase√±as siguen activas ‚óè El manejo de errores revela trazas de la aplicaci√≥n u otros mensajes de error demasiado informativos a los usuarios FSI ‚Äì Seguridad en Aplicaciones Web 24 A6: Soy vulnerable? (II) ‚óè Para sistemas actualizados, las nuevas funciones de seguridad se encuentran desactivadas o no se encuentran configuradas de forma segura ‚óè El servidor no env√≠a cabezales de seguridad a los clientes o no se encuentran configurados con valores seguros ‚óè El software se encuentra desactualizado o posee vulnerabilidades (ver A9: 2017) FSI ‚Äì Seguridad en Aplicaciones Web 25 A6: C√≥mo se previene? ‚óè Un proceso de fortalecimiento reproducible que agilite y facilite la implementaci√≥n de otro entorno que est√© asegurado de manera apropiada. ‚óè Una plataforma minimalista sin funcionalidades innecesarias, componentes, documentaci√≥n o ejemplos. Elimine o no instale frameworks y funcionalidades no utilizadas. ‚óè Un proceso para revisar y actualizar las configuraciones apropiadas para todas las advertencias de seguridad FSI ‚Äì Seguridad en Aplicaciones Web 26 A7: XSS (Cross Site Scripting) ‚óè Las fallas de XSS ocurren cada vez que una aplicaci√≥n toma datos no confiables y los env√≠a al navegador web sin una validaci√≥n y codificaci√≥n apropiada. ‚óè XSS permite a los atacantes ejecutar secuencia de comandos cruzados (XSS) en el navegador de la victima los cuales pueden secuestrar las sesiones de usuario de usuario, destruir sitios web, o dirigir al usuario hacia un sitio malicioso XSS - Demostraci√≥n Aplicaci√≥n con vulnerabilidad XSS Almacenado Atacante establece una trampa ‚Äì actualizar perfil Atacante ingresa un script malicioso en una pagina web que almacena los datos en el servidor Victima visualiza la pagina ‚Äì accede al perfil Script silenciosamente env√≠a la sesi√≥n de la victima al atacante Script se ejecuta en el navegador de la victima Custom CodeAccountsFinanceAdministrationTransactionsCommunicationKnowledge MgmtE-CommerceBus. Functions 1 2 2 A7: Como evitar Fallas de XSS ‚óè Eliminar la Falla: No incluir entradas suministradas por el usuario en la pagina de salida ‚óè Defenderse de la Falla ‚óè Siempre efectuar una validaci√≥n ‚Äòpositiva‚Äô de todas las entradas realizadas por el usuario ‚óè XSS Prevention CheatSheet: https://cheatsheetseries.owasp.org/cheatsheets/ Cross_Site_Scripting_Prevention_Cheat_Sheet.ht ml FSI ‚Äì Seguridad en Aplicaciones Web 29 A8: Deserializaci√≥n Insegura ‚óè La explotaci√≥n de la deserializaci√≥n es algo dif√≠cil, ya que los exploits como son distribuidos raramente funcionan sin cambios o ajustes en el c√≥digo de exploit subyacente. FSI ‚Äì Seguridad en Aplicaciones Web 30 A8: Soy vulnerable? ‚óè Aplicaciones y APIs ser√°n vulnerables si deserializan objetos hostiles o manipulados por un atacante ‚óè Dos tipos primarios de ataques: ‚Äì Ataques relacionados con la estructura de datos y objetos donde el atacante modifica la l√≥gica de la aplicaci√≥n o logra una ejecuci√≥n remota de c√≥digo si existen clases disponibles para la aplicaci√≥n que pueden cambiar el comportamiento durante o despu√©s de la deserializaci√≥n. FSI ‚Äì Seguridad en Aplicaciones Web 31 A8 ‚Äì Deserializaci√≥n Insegura (2) ‚Äì Ataques t√≠picos de manipulaci√≥n de datos, como ataques relacionados con el control de acceso en los que se utilizan estructuras de datos existentes pero se modifica su contenido. FSI ‚Äì Seguridad en Aplicaciones Web 32 A8: C√≥mo prevenirlo? ‚óè No aceptar objetos serializados de fuentes no confiables o utilizar medios de serializaci√≥n que s√≥lo permitan tipos de datos primitivos ‚óè Si no es posible, considere uno o mas de los siguientes: ‚Äì Implementar verificaciones de integridad (por ej. firmas digitales) con el fin de detectar modificaciones no autorizadas ‚Äì Cumplimiento estricto de verificaciones del tipo de los datos ‚Äì Aislar el c√≥digo que realiza la deserializaci√≥n, de modo que ejecute en un entorno con los m√≠nimos privilegios ‚Äì Registrar excepciones y fallas en la deserializaci√≥n, tales como cuando el tipo recibido no es el tipo esperado, o la deserializaci√≥n lanza excepciones. A9: Uso de Componentes con Vulnerabilidades Conocidas ‚óè En teor√≠a, debiera ser f√°cil distinguir si estas usando un componente o biblioteca vulnerable ‚óè M√°s a√∫n, no todas las bibliotecas usan un sistema num√©rico de versiones entendible. ‚Äì No todas las vulnerabilidades son reportadas a un centro de intercambio f√°cil de buscar, Sitios como CVE y NVD se est√°n volviendo f√°ciles de buscar. A9: Soy Vulnerable? ‚óè Para determinar si es vulnerable necesita buscar en estas bases de datos, as√≠ como tambi√©n mantenerse al tanto de la lista de correos del proyecto ‚óè Debe evaluar cuidadosamente si es o no vulnerable revisando si su c√≥digo utiliza la parte del componente vulnerable y si el fallo puede resultar en un impacto A9: C√≥mo prevenirlo? ‚óè Identificar todos los componentes y la versi√≥n que est√°n ocupando, incluyendo dependencias ‚óè Revisar la seguridad del componente en bases de datos p√∫blicas, lista de correos del proyecto, y lista de correo de seguridad, y mantenerlos actualizados. ‚óè Establecer pol√≠ticas de seguridad que regulen el uso de componentes FSI ‚Äì Seguridad en Aplicaciones Web 36 A10: Registro y Monitoreo Insuficientes ‚óè Eventos auditables, tales como los inicios de sesi√≥n, fallos en el inicio de sesi√≥n, y transacciones de alto valor no son registrados ‚óè Advertencias y errores generan registros poco claros, inadecuados o ninguno en absoluto ‚óè Registros en aplicaciones o APIs no son monitoreados por actividad sospechosa ‚óè Registros son almacenados √∫nicamente de forma local FSI ‚Äì Seguridad en Aplicaciones Web 37 A10: C√≥mo prevenirlo? ‚óè Errores de inicio de sesi√≥n, de control de acceso y de validaci√≥n de entradas se deben registrar con el contexto de usuario suficiente para identificar cuentas sospechosas o maliciosas ‚óè Transacciones de alto impacto deben de tener una pista de auditor√≠a con controles de integridad para prevenir alteraciones o eliminaciones ‚óè Establecer monitoreo y alerta de actividades sospechosas FSI ‚Äì Seguridad en Aplicaciones Web 38 Riesgos adicionales a considerar ‚óè El Top 10 cubre mucho, pero hay otros riesgos que deber√≠an considerarse ‚óè Algunos de estos han aparecido en versiones previas del OWASP Top 10, y otros no, incluyendo nuevas t√©cnicas de ataque que est√°n siendo identificadas todo el tiempo FSI ‚Äì Seguridad en Aplicaciones Web 39 Resumen FSI ‚Äì Seguridad en Aplicaciones Web 40 Referencias G. McGraw, Software Security, Addison-Wesley, 2006 OWASP Top Ten 2017","libVersion":"0.3.1","langs":""}